{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport React from \"react\";\nimport groq from \"groq\";\nimport imageUrlBuilder from \"@sanity/image-url\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport client from \"../client\";\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nfunction Post(props) {\n  const {\n    title = \"Missing title\",\n    name = \"Missing name\",\n    categories,\n    authorImage,\n    body = []\n  } = props;\n  return React.createElement(\"article\", null, React.createElement(\"h1\", null, title), React.createElement(\"span\", null, \"By \", name), categories && React.createElement(\"ul\", null, \"Posted in\", categories.map(category => React.createElement(\"li\", {\n    key: category\n  }, category))), authorImage && React.createElement(\"div\", null, React.createElement(\"img\", {\n    src: urlFor(authorImage).width(50).url()\n  })), React.createElement(BlockContent, _extends({\n    blocks: body,\n    imageOptions: {\n      w: 320,\n      h: 240,\n      fit: \"max\"\n    }\n  }, client.config())));\n}\n\nconst query = groq`*[_type == \"post\" && slug.current == $slug][0]{\n  title,\n  \"name\": author->name,\n  \"categories\": categories[]->title,\n  \"authorImage\": author->image,\n  body\n}`;\n\nPost.getInitialProps = async function (context) {\n  // It's important to default the slug so that it doesn't return \"undefined\"\n  const {\n    slug = \"\"\n  } = context.query;\n  return await client.fetch(query, {\n    slug\n  });\n};\n\nexport default Post;","map":{"version":3,"sources":["/Users/youdasilva/Projects/Web Projects/sanity-blog/web/pages/post.js"],"names":["groq","imageUrlBuilder","BlockContent","client","urlFor","source","image","Post","props","title","name","categories","authorImage","body","map","category","width","url","w","h","fit","config","query","getInitialProps","context","slug","fetch"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACtB,SAAOJ,eAAe,CAACE,MAAD,CAAf,CAAwBG,KAAxB,CAA8BD,MAA9B,CAAP;AACD;;AAED,SAASE,IAAT,CAAcC,KAAd,EAAqB;AACnB,QAAM;AACJC,IAAAA,KAAK,GAAG,eADJ;AAEJC,IAAAA,IAAI,GAAG,cAFH;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,IAAI,GAAG;AALH,MAMFL,KANJ;AAOA,SACE,qCACE,gCAAKC,KAAL,CADF,EAEE,yCAAUC,IAAV,CAFF,EAGGC,UAAU,IACT,6CAEGA,UAAU,CAACG,GAAX,CAAeC,QAAQ,IACtB;AAAI,IAAA,GAAG,EAAEA;AAAT,KAAoBA,QAApB,CADD,CAFH,CAJJ,EAWGH,WAAW,IACV,iCACE;AACE,IAAA,GAAG,EAAER,MAAM,CAACQ,WAAD,CAAN,CACFI,KADE,CACI,EADJ,EAEFC,GAFE;AADP,IADF,CAZJ,EAoBE,oBAAC,YAAD;AACE,IAAA,MAAM,EAAEJ,IADV;AAEE,IAAA,YAAY,EAAE;AAAEK,MAAAA,CAAC,EAAE,GAAL;AAAUC,MAAAA,CAAC,EAAE,GAAb;AAAkBC,MAAAA,GAAG,EAAE;AAAvB;AAFhB,KAGMjB,MAAM,CAACkB,MAAP,EAHN,EApBF,CADF;AA4BD;;AAED,MAAMC,KAAK,GAAGtB,IAAK;;;;;;EAAnB;;AAQAO,IAAI,CAACgB,eAAL,GAAuB,gBAAeC,OAAf,EAAwB;AAC7C;AACA,QAAM;AAAEC,IAAAA,IAAI,GAAG;AAAT,MAAgBD,OAAO,CAACF,KAA9B;AACA,SAAO,MAAMnB,MAAM,CAACuB,KAAP,CAAaJ,KAAb,EAAoB;AAAEG,IAAAA;AAAF,GAApB,CAAb;AACD,CAJD;;AAMA,eAAelB,IAAf","sourcesContent":["import groq from \"groq\";\nimport imageUrlBuilder from \"@sanity/image-url\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport client from \"../client\";\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nfunction Post(props) {\n  const {\n    title = \"Missing title\",\n    name = \"Missing name\",\n    categories,\n    authorImage,\n    body = []\n  } = props;\n  return (\n    <article>\n      <h1>{title}</h1>\n      <span>By {name}</span>\n      {categories && (\n        <ul>\n          Posted in\n          {categories.map(category => (\n            <li key={category}>{category}</li>\n          ))}\n        </ul>\n      )}\n      {authorImage && (\n        <div>\n          <img\n            src={urlFor(authorImage)\n              .width(50)\n              .url()}\n          />\n        </div>\n      )}\n      <BlockContent\n        blocks={body}\n        imageOptions={{ w: 320, h: 240, fit: \"max\" }}\n        {...client.config()}\n      />\n    </article>\n  );\n}\n\nconst query = groq`*[_type == \"post\" && slug.current == $slug][0]{\n  title,\n  \"name\": author->name,\n  \"categories\": categories[]->title,\n  \"authorImage\": author->image,\n  body\n}`;\n\nPost.getInitialProps = async function(context) {\n  // It's important to default the slug so that it doesn't return \"undefined\"\n  const { slug = \"\" } = context.query;\n  return await client.fetch(query, { slug });\n};\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}